{"version":3,"sources":["head/Head.js","App.js","serviceWorker.js","index.js"],"names":["Logo","props","Content","params","className","id","href","TitleElement","onClick","e","name","window","location","assign","document","getElementById","classList","toggle","type","Head","App","Boolean","hostname","match","ReactDOM","render","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"qPAIA,SAASA,EAAKC,GACV,OACI,kBAAC,IAAD,MAIR,SAASC,EAAQC,GACb,OACI,yBAAKC,UAAU,UAAUC,GAAK,WAC1B,uBAAGD,UAAU,MAAb,WACA,wBAAIA,UAAU,uBACd,uBAAGA,UAAU,MAAb,2BAEA,yBAAKA,UAAU,cAAcC,GAAK,eAC9B,yBAAKD,UAAU,sBACX,yBAAKA,UAAU,aACX,yBAAKA,UAAU,QACX,yBAAKA,UAAU,yCACX,wBAAIA,UAAU,cAAd,mBACA,uBAAGA,UAAU,aAAb,0EACA,uBAAGE,KAAK,uDAAuDF,UAAU,mBAAzE,mCAKZ,yBAAKA,UAAU,YACH,yBAAKA,UAAU,QACX,yBAAKA,UAAU,yCACX,wBAAIA,UAAU,cAAd,wBACA,uBAAGA,UAAU,aAAb,kEACA,uBAAGE,KAAK,IAAIF,UAAU,mBAAtB,sBAKxB,yBAAKA,UAAU,sBACX,yBAAKA,UAAU,YACH,yBAAKA,UAAU,QACf,yBAAKA,UAAU,yCACX,wBAAIA,UAAU,cAAd,eACA,uBAAGA,UAAU,aAAb,0EACA,uBAAGE,KAAK,gDAAgDF,UAAU,mBAAlE,wBAKhB,yBAAKA,UAAU,YACH,yBAAKA,UAAU,QACf,yBAAKA,UAAU,yCACX,wBAAIA,UAAU,cAAd,6BACA,uBAAGA,UAAU,aAAb,0EACA,uBAAGE,KAAK,wDAAwDF,UAAU,mBAA1E,2BAcpC,SAASG,EAAaN,GAoBlB,OACA,4BAAQO,QAhBR,SAAqBC,GACjB,IAAIC,EAAOT,EAAMS,KACjB,GAAa,SAATA,EAAgB,CAIhBC,OAAOC,SAASC,OAHD,2CAIA,aAATH,GAVVI,SAASC,eAAe,eAAeC,UAAUC,OAAO,eAmB9BC,KAAK,SAASd,UAAU,8CACjDH,EAAMS,MAsBAS,MAjBf,SAAclB,GACV,OACI,yBAAKG,UAAY,QACb,yBAAKA,UAAY,cAAa,kBAACJ,EAAD,OAE9B,yBAAKI,UAAU,8CACX,kBAACG,EAAD,CAAcG,KAAK,SACnB,kBAACH,EAAD,CAAcG,KAAK,WAAWL,GAAK,aACnC,kBAACE,EAAD,CAAcG,KAAK,UAEnB,kBAACR,EAAD,QC9FDkB,MARf,WACE,OACE,yBAAKhB,UAAU,OACX,kBAAC,EAAD,QCKYiB,QACW,cAA7BV,OAAOC,SAASU,UAEe,UAA7BX,OAAOC,SAASU,UAEhBX,OAAOC,SAASU,SAASC,MACvB,2D,MCTNC,IAASC,OAAO,kBAAC,EAAD,MAASX,SAASC,eAAe,SD0H3C,kBAAmBW,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,a","file":"static/js/main.9ca01efc.chunk.js","sourcesContent":["import React, { Component } from 'react';\nimport './Head.css';\nimport ChildCareIcon from '@material-ui/icons/ChildCare';\n\nfunction Logo(props){\n    return(\n        <ChildCareIcon></ChildCareIcon>\n    );\n}\n\nfunction Content(params) {\n    return(\n        <div className=\"content\" id = \"content\"> \n            <p className=\"p0\">Welcome</p>\n            <hr className=\"hr-light my-4 w-75\"></hr>\n            <p className=\"p1\">This is Jane's homepage</p>\n\n            <div className=\"projectHide\" id = \"projectHide\">\n                <div className=\"row left-margin-10\">\n                    <div className=\"col-sm-6 \">\n                        <div className=\"card\">\n                            <div className=\"card-body background-color-light-blue\">\n                                <h5 className=\"card-title\">World in a cell</h5>\n                                <p className=\"card-text\">With supporting text below as a natural lead-in to additional content.</p>\n                                <a href=\"http://worldbuilding.usc.edu/people/bio/huijun-wang/\" className=\"btn btn-primary\">Check out what I did in this</a>\n                            </div>\n                        </div>          \n                    </div>\n\n                    <div className=\"col-sm-6\">\n                                <div className=\"card\">\n                                    <div className=\"card-body background-color-light-blue\">\n                                        <h5 className=\"card-title\">Entrtainment website</h5>\n                                        <p className=\"card-text\">This is a website that used Technology of Angular 7 and NodeJS</p>\n                                        <a href=\"#\" className=\"btn btn-primary\">Go To the Page</a>\n                                    </div>\n                                </div>\n                    </div>\n                </div>\n                <div className=\"row left-margin-10\">\n                    <div className=\"col-sm-6\">\n                                <div className=\"card\">\n                                <div className=\"card-body background-color-light-blue\">\n                                    <h5 className=\"card-title\">Up(VR game)</h5>\n                                    <p className=\"card-text\">With supporting text below as a natural lead-in to additional content.</p>\n                                    <a href=\"https://sites.google.com/usc.edu/whatsup/home\" className=\"btn btn-primary\">Check our website</a>\n                                </div>\n                                </div>\n                    </div>\n                \n                    <div className=\"col-sm-6\">\n                                <div className=\"card\">\n                                <div className=\"card-body background-color-light-blue\">\n                                    <h5 className=\"card-title\">Secret Of Runes (2D game)</h5>\n                                    <p className=\"card-text\">With supporting text below as a natural lead-in to additional content.</p>\n                                    <a href=\"https://sites.google.com/usc.edu/secret-of-runes/home\" className=\"btn btn-primary\" >Check our website</a>\n                                </div>\n                                </div>\n                    </div>\n                </div>\n            </div>\n        </div>\n        \n    );\n}\n\n\n\n\nfunction TitleElement(props) {\n    function showProjects(){\n        document.getElementById(\"projectHide\").classList.toggle(\"projectPop\");\n    }\n\n    function handleClick(e) {\n        var name = props.name;\n        if( name === 'Home'){\n            var pageUrl =  'https://hjwang95.github.io/home_app' ;\n\n            // bug: window.location.assign(pageUrl); is outside the if statement\n            window.location.assign(pageUrl);\n        }else if (name === 'Projects') {\n            showProjects();\n        }else{\n            // Life button\n        }\n        \n\n    }\n    return (            \n    <button onClick={handleClick} type=\"button\" className=\"btn btn-outline-info btn-margin btn-circle\">\n        {props.name}\n    </button>   \n    );\n}\n\nfunction Head(props) {\n    return ( \n        <div className = \"head\">\n            <div className = \"float-left\"><Logo /></div>\n\n            <div className=\"btn-toolbar btn-toolbar-margin float-right\">\n                <TitleElement name='Home' />\n                <TitleElement name='Projects' id = \"projects\" />\n                <TitleElement name='Life'/>\n            </div>\n                <Content></Content>\n\n            \n        </div>\n    );\n}\n\nexport default Head;\n","import React from 'react';\nimport './App.css';\nimport Head from './head/Head';\n\nfunction App() {\n  return (\n    <div className=\"App\">\n        <Head></Head>        \n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport 'bootstrap/dist/css/bootstrap.min.css';\n\n\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}